# app_face_recognition/camera_setup.py
import cv2
# type: ignore
from pygrabber.dshow_graph import FilterGraph # type: ignore


class CameraManager:
    def __init__(self, camera_id=0):
        """
        Kh·ªüi t·∫°o CameraManager v·ªõi ID camera m·∫∑c ƒë·ªãnh l√† 0.
        """
        self.camera_id = camera_id
        self.camera = None
        self.is_opened = False

    def open_camera(self):
        """
        M·ªü camera v√† ki·ªÉm tra k·∫øt n·ªëi.
        """
        try:
            self.camera = cv2.VideoCapture(self.camera_id)
            if not self.camera.isOpened():
                raise Exception(f"Kh√¥ng th·ªÉ m·ªü camera v·ªõi ID {self.camera_id}")
            self.is_opened = True
            return True
        except Exception as e:
            print(f"L·ªói khi m·ªü camera: {e}")
            self.is_opened = False
            return False

    def get_frame(self):
        """
        ƒê·ªçc m·ªôt khung h√¨nh t·ª´ camera.
        """
        if not self.is_opened:
            print("Camera ch∆∞a ƒë∆∞·ª£c m·ªü.")
            return None
        ret, frame = self.camera.read()
        if not ret:
            print("Kh√¥ng th·ªÉ ƒë·ªçc khung h√¨nh t·ª´ camera.")
            return None
        return frame

    def get_camera_info(self):
        """
        L·∫•y th√¥ng tin c∆° b·∫£n c·ªßa camera (n·∫øu c√≥).
        """
        if not self.is_opened:
            print("Camera ch∆∞a ƒë∆∞·ª£c m·ªü.")
            return None
        try:
            # L·∫•y c√°c thu·ªôc t√≠nh c∆° b·∫£n
            width = int(self.camera.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(self.camera.get(cv2.CAP_PROP_FRAME_HEIGHT))
            fps = self.camera.get(cv2.CAP_PROP_FPS)
            return {
                "id": self.camera_id,
                "resolution": (width, height),
                "fps": fps
            }
        except Exception as e:
            print(f"L·ªói khi l·∫•y th√¥ng tin camera: {e}")
            return None

    def release_camera(self):
        """
        Gi·∫£i ph√≥ng camera khi kh√¥ng c√≤n s·ª≠ d·ª•ng.
        """
        if self.camera and self.is_opened:
            self.camera.release()
            self.is_opened = False
            print("Camera ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng.")
            
    @staticmethod
    def list_available_cameras():
        """
        Tr·∫£ v·ªÅ danh s√°ch c√°c tuple (id, name) c·ªßa c√°c camera ƒëang k·∫øt n·ªëi v·ªõi m√°y t√≠nh (Windows only).
        """
        try:
            graph = FilterGraph()
            camera_names = graph.get_input_devices()
            return [(i, name) for i, name in enumerate(camera_names)]
        except Exception as e:
            print(f"Kh√¥ng th·ªÉ l·∫•y danh s√°ch camera: {e}")
            return []


    def __enter__(self):
        """
        H·ªó tr·ª£ s·ª≠ d·ª•ng CameraHandler trong kh·ªëi 'with'.
        """
        self.open_camera()
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        """
        T·ª± ƒë·ªông gi·∫£i ph√≥ng camera khi ra kh·ªèi kh·ªëi 'with'.
        """
        self.release_camera()

# Example usage
if __name__ == '__main__':
    with CameraManager(camera_id=0) as cam_handler:
        cameras = CameraManager.list_available_cameras()
        if cameras:
            print("Danh s√°ch camera ƒëang k·∫øt n·ªëi:")
            for i, name in enumerate(cameras):
                print(f"{i}: {name}")
        else:
            print("Kh√¥ng t√¨m th·∫•y camera n√†o c·∫£ üò¢")
        if cam_handler.is_opened:
            info = cam_handler.get_camera_info()
            print(f"Th√¥ng tin camera: {info}")
            while True:
                frame = cam_handler.get_frame()
                if frame is None:
                    break
                cv2.imshow("Camera Stream", frame)
                
                # Nh·∫•n ph√≠m 'q' ƒë·ªÉ tho√°t
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

            cv2.destroyAllWindows()
        else:
            print("Kh√¥ng th·ªÉ m·ªü camera.")

